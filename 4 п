#include <iostream>
using namespace std;

int getTheAnswer(int &spot, int **&sections, unsigned short int &n)
{
    unsigned short int answer = 0;
    
    for (unsigned short int i = 0; i < n; i++)
        if (spot < sections[i][0] || spot > sections[i][1]) //Если точка не лежит в данном отрезке, значит плюсуем к ответу 1
            answer++;
    
    return answer; //Выводим ответ
}

void outer_points(unsigned short int &n, unsigned short int &m)
{ //Используем unsigned short int для максимальной экономии памяти
    int **sections = new int*[n];     for (unsigned short int i = 0; i < n; i++)
        sections[i] = new int[2];
    
    for (unsigned short int i = 0; i < n; i++)
        cin >>sections[i][0] >> sections[i][1];
    
    int *spots = new int[m];
    for (unsigned short int i = 0; i < m; i++) //Заполняем массив
        cin >> spots[i];
    
    for (unsigned short int i = 0; i < m; i++) //Главный цикл
        cout << getTheAnswer(spots[i], sections, n) << " "; //Эта функция проверяет в скольки отрезках нет данной точки, и возвращает ответ, так что мы используем ее для всех данных точек
    
    for (int i = 0; i < n; i++) 
        delete[] sections[i];
    delete[] sections; 
    delete[] spots; 
} 

int main() 
{ 
    unsigned short int n, m; cin >> n >> m;
    outer_points(n, m); 
    

    return 0;
}
